// Generated by view binder compiler. Do not edit!
package com.chenge.markdownsdk.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.chenge.markdown.render.MarkdownView;
import com.chenge.markdownsdk.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton composeButton;

  @NonNull
  public final MarkdownView contentTextView;

  @NonNull
  public final MaterialButton debugRenderButton;

  @NonNull
  public final FloatingActionButton fab;

  @NonNull
  public final CircularProgressIndicator progressBar;

  @NonNull
  public final MaterialButton streamingModeButton;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final TextView timeTextView;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final MaterialButton typewriterButton;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton composeButton, @NonNull MarkdownView contentTextView,
      @NonNull MaterialButton debugRenderButton, @NonNull FloatingActionButton fab,
      @NonNull CircularProgressIndicator progressBar, @NonNull MaterialButton streamingModeButton,
      @NonNull SwipeRefreshLayout swipeRefreshLayout, @NonNull TextView timeTextView,
      @NonNull MaterialToolbar toolbar, @NonNull MaterialButton typewriterButton) {
    this.rootView = rootView;
    this.composeButton = composeButton;
    this.contentTextView = contentTextView;
    this.debugRenderButton = debugRenderButton;
    this.fab = fab;
    this.progressBar = progressBar;
    this.streamingModeButton = streamingModeButton;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.timeTextView = timeTextView;
    this.toolbar = toolbar;
    this.typewriterButton = typewriterButton;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.composeButton;
      MaterialButton composeButton = ViewBindings.findChildViewById(rootView, id);
      if (composeButton == null) {
        break missingId;
      }

      id = R.id.contentTextView;
      MarkdownView contentTextView = ViewBindings.findChildViewById(rootView, id);
      if (contentTextView == null) {
        break missingId;
      }

      id = R.id.debugRenderButton;
      MaterialButton debugRenderButton = ViewBindings.findChildViewById(rootView, id);
      if (debugRenderButton == null) {
        break missingId;
      }

      id = R.id.fab;
      FloatingActionButton fab = ViewBindings.findChildViewById(rootView, id);
      if (fab == null) {
        break missingId;
      }

      id = R.id.progressBar;
      CircularProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.streamingModeButton;
      MaterialButton streamingModeButton = ViewBindings.findChildViewById(rootView, id);
      if (streamingModeButton == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.timeTextView;
      TextView timeTextView = ViewBindings.findChildViewById(rootView, id);
      if (timeTextView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.typewriterButton;
      MaterialButton typewriterButton = ViewBindings.findChildViewById(rootView, id);
      if (typewriterButton == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, composeButton, contentTextView,
          debugRenderButton, fab, progressBar, streamingModeButton, swipeRefreshLayout,
          timeTextView, toolbar, typewriterButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
